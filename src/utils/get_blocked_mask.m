function is_blocked = get_blocked_mask(block_info, XX, YY)
%GET_BLOCKED_MASK Creates a boolean mask for grid points inside obstacles.
%   This function determines which points of a grid lie inside one or more
%   polygonal obstacles. It is a crucial utility for setting up simulations
%   with complex geometries.
%
%   Usage:
%       is_blocked = get_blocked_mask(block_info, XX, YY);
%
%   Inputs:
%       block_info - A cell array, where each cell contains information about
%                    one obstacle. It must contain a field '.points', which
%                    is an M-by-2 matrix of [x, y] coordinates defining the
%                    vertices of the obstacle polygon.
%       XX, YY     - Coordinate matrices for the grid points, typically
%                    generated by MESHGRID.
%
%   Output:
%       is_blocked - A boolean matrix of the same size as XX and YY. An
%                    element is_blocked(i,j) is true if the grid point
%                    (XX(i,j), YY(i,j)) is inside or on the boundary of
%                    any of the specified obstacles. Otherwise, it is false.

% Get the dimensions of the grid.
[Ny, Nx] = size(XX);

% Initialize the output mask as all false.
is_blocked = false(Ny, Nx);

% Flatten the grid coordinate matrices into column vectors for efficient
% processing by the inpolygon function.
query_points_x = XX(:);
query_points_y = YY(:);

% Iterate through each obstacle defined in the block_info cell array.
for k = 1:length(block_info)
    obstacle = block_info{k};
    poly_points = obstacle.points;
    
    % Use MATLAB's built-in inpolygon function to efficiently determine
    % which of the query points are inside or on the boundary of the current obstacle's polygon.
    [in, ~] = inpolygon(query_points_x, query_points_y, poly_points(:,1), poly_points(:,2));
    
    % Reshape the resulting logical vector back into a 2D mask that
    % matches the original grid dimensions.
    in_mask = reshape(in, Ny, Nx);
    
    % Combine the mask for the current obstacle with the master mask using a logical OR operation. 
    is_blocked = is_blocked | in_mask;
end

end
